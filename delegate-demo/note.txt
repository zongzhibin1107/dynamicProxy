一、代理就是对目标方法进行增强.

二、Service里你的业务逻辑我们称之为需要执行的目标方法；
    开启事务，提交事务这些我们就可以称之为对目标方法的增强。
    于是乎，我们可不可以这样：“需要执行的目标”单独写一个类（目标类），
    “需要增强的动作”单独写一个类（增强类），最后再写一个类（代理类），
    把它两者结合到一起。

三、静态代理类的缺点：
    1、假设一个系统中有100个Service，则需要创建100个代理对象
    2、如果一个Service中有很多方法需要事务（增强动作），发现代理对象的方法中还是有很多重复的代码
    3、由第一点和第二点可以得出：静态代理的重用性不强


四、动态代理
    动态代理分为JDK的动态代理和cglib动态代理，他俩有略微的差别：cglib动态代理产生的代理对象是目标对象的子类。
    注意：在动态代理在生成代理对象的时候需要一个拦截器 InvocationHandler 因此咱们需要写一个拦截器。
    代理类的每一个方法被调用的时候都会调用下边的这个invoke方法.

    们用上边的做法去实现目标方法的增强，实现代码的解耦，是没有问题的，
    但是还是需要自己去生成代理对象，自己手写拦截器，在拦截器里自己手动的去把要增强的内容和目标方法结合起来

五、SpringAop

    1、概念：
        切面类：就是要执行的增强的方法所在的类，比如咱们例子里的MyTransaction类
        通知：切面类里的方法，比如咱们例子的beginTransaction( )方法和commit( )
        目标方法：要执行的目标方法，比如咱们例子里的savePerson( )方法
        织入：把通知和目标方法进行结合，形成代理对象的过程就叫织入

    2、源码级别SpringAop
        这是调用时机：
        在refresh方法中,调用finishBeanFactoryInitialization
            --》getBean
            --》resolveBeforeInstantiation
                    --》 applyBeanPostProcessorsBeforeInstantiation
                        --》AbstractAutoProxyCreator.postProcessBeforeInstantiation

        因为Springboot要开器AOP功能需要注解：
        @EnableAspectJAutoProxy
         --》@Import(AspectJAutoProxyRegistrar.class)
           --》AspectJAutoProxyRegistrar implement ImportBeanDefinitionRegistrar
               会默认走registerBeanDefinitions（）  在这个方法里注册了AnnotationAwareAspectJAutoProxyCreator
               而AnnotationAwareAspectJAutoProxyCreator extends AspectJAwareAdvisorAutoProxyCreator
               而AspectJAwareAdvisorAutoProxyCreator extends AbstractAdvisorAutoProxyCreator
               而AbstractAdvisorAutoProxyCreator extends AbstractAutoProxyCreator
         所以AnnotationAwareAspectJAutoProxyCreator  这个会在容器启动创建bean时拦截需要代理的类创建对应的代理类




